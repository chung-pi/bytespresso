// Copyright (C) 2016- Shigeru Chiba.  All Rights Reserved.

package javassist.offload.javatoc;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javassist.CtClass;
import javassist.offload.javatoc.impl.Serializer;
import javassist.offload.lib.Jvm;

/**
 * The main class launched by the C program generated by
 * {@link StandaloneDriver}.  This handles a @Remote call
 * from the C program.
 */
public class Server {
    /**
     * The main method.
     */
    public static void main(String[] args) throws IOException {
        new Server().mainLoop(System.in, System.err);
    }

    /**
     * Handles remote calls until the termination signal is received.
     */
    protected InputStream mainLoop(InputStream is, OutputStream out) throws IOException {
        //is = new BufferedInputStream(is);
        //out = new BufferedOutputStream(out);
        Callback.initialize(is, out);
        while (!Jvm.readBoolean(is)) // finish if true
            try {
                handleRemoteCalls(is, out);
            }
            catch (Exception e) {
                throw new RuntimeException("@Remote call failed.", e);
            }

        Callback.erase();
        return is;
    }

    /**
     * Handles remote calls.  After the termination signal is received,
     * it receives the resulting value from the main method.
     *
     * @param returnType    the type of the resulting value.
     * @param compType      the component type if the resulting type is an array type.
     *                      Otherwise, null.
     * @return the resulting value, or {@code void.class} if the result type is {@code void}.
     */
    protected Object mainLoop(InputStream is, OutputStream out,
                            CtClass returnType, CtClass compType)
        throws IOException
    {
        is = mainLoop(is, out);
        return Serializer.readValue(returnType, compType, is);
    }

    /**
     * @see javassist.offload.javatoc.impl.CTracer#makeRemoteFunction(...)
     */
    protected void handleRemoteCalls(InputStream is, OutputStream out) throws Exception {
        String className = Jvm.readString(is);
        String method = Jvm.readString(is);
        String descriptor = Jvm.readString(is);
        Class<?> clazz = Class.forName(className);
        java.lang.reflect.Method m
                = javassist.util.proxy.RuntimeSupport.findMethod(clazz, method, descriptor);
        Class<?>[] paramTypes = m.getParameterTypes();
        Object[] args = new Object[paramTypes.length];
        for (int i = 0; i < args.length; i++)
            args[i] = Serializer.readValue(paramTypes[i], is);

        Object r = m.invoke(null, args);
        Jvm.writeBoolean(out, true);         // normally terminated.
        Serializer.writeValue(m.getReturnType(), r, out);
        out.flush();
    }
}
